
sevenSegment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000194  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  00000208  2**0
                  ALLOC
  2 .stab         00000510  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000036a  00000000  00000000  00000718  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_18>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 a9 00 	call	0x152	; 0x152 <main>
  74:	0c 94 c8 00 	jmp	0x190	; 0x190 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <init_INT>:
 */

#include "ex_interrupt.h"

void init_INT()
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR ,INT2);//enable external interrupt (INT2)
  84:	ab e5       	ldi	r26, 0x5B	; 91
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	eb e5       	ldi	r30, 0x5B	; 91
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	80 62       	ori	r24, 0x20	; 32
  90:	8c 93       	st	X, r24
	SET_BIT(SREG ,I);  //enable global interrupt
  92:	af e5       	ldi	r26, 0x5F	; 95
  94:	b0 e0       	ldi	r27, 0x00	; 0
  96:	ef e5       	ldi	r30, 0x5F	; 95
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	80 68       	ori	r24, 0x80	; 128
  9e:	8c 93       	st	X, r24
	SET_BIT(MCUCSR,ISC2);//CONFIGURE INT2 AT RISING EDGE AT PINB2
  a0:	a4 e5       	ldi	r26, 0x54	; 84
  a2:	b0 e0       	ldi	r27, 0x00	; 0
  a4:	e4 e5       	ldi	r30, 0x54	; 84
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	80 64       	ori	r24, 0x40	; 64
  ac:	8c 93       	st	X, r24
}
  ae:	cf 91       	pop	r28
  b0:	df 91       	pop	r29
  b2:	08 95       	ret

000000b4 <__vector_18>:

void __vector_18()
{
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	8f 93       	push	r24
  c0:	df 93       	push	r29
  c2:	cf 93       	push	r28
  c4:	cd b7       	in	r28, 0x3d	; 61
  c6:	de b7       	in	r29, 0x3e	; 62
	INT_flag=1;
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	80 93 60 00 	sts	0x0060, r24
}
  ce:	cf 91       	pop	r28
  d0:	df 91       	pop	r29
  d2:	8f 91       	pop	r24
  d4:	0f 90       	pop	r0
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	0f 90       	pop	r0
  da:	1f 90       	pop	r1
  dc:	18 95       	reti

000000de <init_io>:
 */

#include "io.h"

void init_io()
{
  de:	df 93       	push	r29
  e0:	cf 93       	push	r28
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(DDRB,PB2);// MAKE PIN3 AT PORTB IS INPUT
  e6:	a7 e3       	ldi	r26, 0x37	; 55
  e8:	b0 e0       	ldi	r27, 0x00	; 0
  ea:	e7 e3       	ldi	r30, 0x37	; 55
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	8b 7f       	andi	r24, 0xFB	; 251
  f2:	8c 93       	st	X, r24
	DDRC|=0X0F; //MAKE FIRST 4 PINS IS OUTPUT (in PORTC) 7seg is connected on PORTC by using decoder7447
  f4:	a4 e3       	ldi	r26, 0x34	; 52
  f6:	b0 e0       	ldi	r27, 0x00	; 0
  f8:	e4 e3       	ldi	r30, 0x34	; 52
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	8f 60       	ori	r24, 0x0F	; 15
 100:	8c 93       	st	X, r24
	PORTC &=0XF0; //initialize 7 seg with zero
 102:	a5 e3       	ldi	r26, 0x35	; 53
 104:	b0 e0       	ldi	r27, 0x00	; 0
 106:	e5 e3       	ldi	r30, 0x35	; 53
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	80 7f       	andi	r24, 0xF0	; 240
 10e:	8c 93       	st	X, r24


}
 110:	cf 91       	pop	r28
 112:	df 91       	pop	r29
 114:	08 95       	ret

00000116 <seven_seg_increment>:

/*i want to show number  on 7seg */
void seven_seg_increment(uint8 num)
{
 116:	df 93       	push	r29
 118:	cf 93       	push	r28
 11a:	0f 92       	push	r0
 11c:	cd b7       	in	r28, 0x3d	; 61
 11e:	de b7       	in	r29, 0x3e	; 62
 120:	89 83       	std	Y+1, r24	; 0x01
    /*
     * (c7..c4 c3 c2 c1 c0 &11110000) =c7..c4 0000
     * say num= 1 ..00000001&00001111=0000000
     * c7..c4 |00000001=c7..c40001
     */
	PORTC = (PORTC & 0XF0) | (num & 0x0F);/*the number will be showed on 7SEG */
 122:	a5 e3       	ldi	r26, 0x35	; 53
 124:	b0 e0       	ldi	r27, 0x00	; 0
 126:	e5 e3       	ldi	r30, 0x35	; 53
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	98 2f       	mov	r25, r24
 12e:	90 7f       	andi	r25, 0xF0	; 240
 130:	89 81       	ldd	r24, Y+1	; 0x01
 132:	8f 70       	andi	r24, 0x0F	; 15
 134:	89 2b       	or	r24, r25
 136:	8c 93       	st	X, r24

	while( PINB & (1<<PB2) )/*don't do any action while the switch is still pressed*/
 138:	e6 e3       	ldi	r30, 0x36	; 54
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	88 2f       	mov	r24, r24
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	84 70       	andi	r24, 0x04	; 4
 144:	90 70       	andi	r25, 0x00	; 0
 146:	00 97       	sbiw	r24, 0x00	; 0
 148:	b9 f7       	brne	.-18     	; 0x138 <seven_seg_increment+0x22>
	{

	}
}
 14a:	0f 90       	pop	r0
 14c:	cf 91       	pop	r28
 14e:	df 91       	pop	r29
 150:	08 95       	ret

00000152 <main>:
#include "ex_interrupt.h"

uint8 INT_flag=0;

int main()
{
 152:	df 93       	push	r29
 154:	cf 93       	push	r28
 156:	0f 92       	push	r0
 158:	cd b7       	in	r28, 0x3d	; 61
 15a:	de b7       	in	r29, 0x3e	; 62
	init_INT();/*initialize external interrupt*/
 15c:	0e 94 3e 00 	call	0x7c	; 0x7c <init_INT>
	init_io();/*initialize 7eg and switch*/
 160:	0e 94 6f 00 	call	0xde	; 0xde <init_io>
	uint8 num=0;
 164:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		/*INT_flag will be equal 1 when external interrupt occur when user press on the switch */
		if(INT_flag==1)
 166:	80 91 60 00 	lds	r24, 0x0060
 16a:	81 30       	cpi	r24, 0x01	; 1
 16c:	e1 f7       	brne	.-8      	; 0x166 <main+0x14>
		{
		   num++;
 16e:	89 81       	ldd	r24, Y+1	; 0x01
 170:	8f 5f       	subi	r24, 0xFF	; 255
 172:	89 83       	std	Y+1, r24	; 0x01
		   /*when number=10 , we can't show 10 on 7 seg so let number =0 */
		   if(num>9)
 174:	89 81       	ldd	r24, Y+1	; 0x01
 176:	8a 30       	cpi	r24, 0x0A	; 10
 178:	28 f0       	brcs	.+10     	; 0x184 <main+0x32>
		   {
			  num=0;
 17a:	19 82       	std	Y+1, r1	; 0x01
			  seven_seg_increment(num);
 17c:	89 81       	ldd	r24, Y+1	; 0x01
 17e:	0e 94 8b 00 	call	0x116	; 0x116 <seven_seg_increment>
 182:	03 c0       	rjmp	.+6      	; 0x18a <main+0x38>
		   }
		   else
		   {
			   seven_seg_increment(num);
 184:	89 81       	ldd	r24, Y+1	; 0x01
 186:	0e 94 8b 00 	call	0x116	; 0x116 <seven_seg_increment>
		   }
		   INT_flag=0;
 18a:	10 92 60 00 	sts	0x0060, r1
 18e:	eb cf       	rjmp	.-42     	; 0x166 <main+0x14>

00000190 <_exit>:
 190:	f8 94       	cli

00000192 <__stop_program>:
 192:	ff cf       	rjmp	.-2      	; 0x192 <__stop_program>
